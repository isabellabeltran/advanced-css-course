/*
CLEARFIX: it appends a pseudo element after the element which will then clear these floats 
*/
/*
COLORS:
*/
/*
GRID: 
*/
/* There are two types of animations in CSS transition and change the properties */
@keyframes moveInLeft {
  /* where the animation starts */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  /* 60% {
    transform: rotate(120deg);
  } */
  80% {
    transform: translateX(1rem); }
  /* where the animation ends */
  100% {
    opacity: 1;
    /* exactly the way it looks at the beginning  */
    transform: translate(0); } }

@keyframes moveInRight {
  /* where the animation starts */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* where the animation ends */
  100% {
    opacity: 1;
    /* exactly the way it looks at the beginning  */
    transform: translate(0); } }

@keyframes moveInBottom {
  /* where the animation starts */
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  /* where the animation ends */
  100% {
    opacity: 1;
    /* exactly the way it looks at the beginning  */
    transform: translate(0); } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

/* 100% will let the user change the fontsize to any size they need 
THIS DEFINES WHAT 1 REM SHOULD BE */
html {
  font-size: 62.5%; }

/* 
<--! power of inherentance --> */
body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 1.6rem; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* occupy the entire width that they have available and they create line breaks */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 2s;
    /* this is an animation that defines how it will proceed so how fast 
    or how slow the paramenters we specify will last MOZILLA has examples of values */
    animation-timing-function: ease-out;
    /* animation will start after whatever seconds we set it */
    /* animation-delay: 3s;  */
    /* the animation will happen whatever times we set it */
    /* animation-iteration-count: 3;  */
    /* determines if the back part of an element when we transform it is visible or not, 
    since it will shake a bit when the elements are animated  */
    backface-visibility: hidden; }
  .heading-primary--sub {
    /* occupy the entire width that they have available and they create line breaks */
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* animation-name: moveInRight;
    animation-duration: 3s;  */
    animation: moveInRight 2s ease-out; }

.btn {
  /* pseudo classes are special states of a selector, link is a state of a btn selector
  We use pseudo classes to style elements under a special condition
  Visited is the state when the user has already clicked in the button before and then sees the btn again
  We put the link and visited state together so the style is the same instead of the regular browser link state
  which starts at blue and becomes purple when is already visited*/
  /* When we click an element is called the active state 
  this is  */
  /* the after pseudo element is treated like a child of the element  */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* on initial state there will be a transition on all the properties.  */
    transition: all .2s;
    /* the reference of the after pseudo class absolute position */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    /* the offset in the X direction is zero because we don't want any the Y direction will be the 
    shadow down 10rem and the third value is the blur. The color rgba becuase we wanted to be transparent 
    */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* when we hover the button (this means then ::) we want some styles for the after pseudo element 
    this is a style on the pseudo element only when the btn is hover
    This will make the btn bigger and fade out 
    Scale will increase the element example 2 will increase double its original size*/ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* trick to fade something out (it set something to invible) */
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /* we always need to specify the content even if is empty otherwise is not going to appear  */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    /* the z index defines the position of the elements if there one on top of the other, -1 will be behind the btn */
    z-index: -1;
    /* here is where we want the transition to happen  */
    transition: all .4s; }
  .btn--animated {
    /* .75 is a delay  */
    animation: moveInBottom .5s ease-out .75s;
    /* the animation will be applied before the animation starts */
    animation-fill-mode: backwards; }

.header {
  /* vh: every point the height of this box should be 
  95% of the view port height.100% WOULD FILL ALL THE VIEW PORT 95% LEFT WHITE SPACE AT THE BOTTOM */
  height: 95vh;
  /* to specify gradients we always use the background-image property
  Whatever we want on top should be after the comma */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* whatever the width of the view port you try to 
  fit the element inside of the box. */
  background-size: cover;
  /* no matter what height is the vh the top will always show */
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
  /* this is the image container */
  /* this is the image itself */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* this top and left are in relation of our parent element */
    top: 40%;
    left: 50%;
    /* transform is in relation to the element */
    transform: translate(-50%, -50%);
    text-align: center; }

/*
the standard this days is 1140px for a grid but in order to make the website dynamic 
we will use rem. Also instead of just width we will use max-width: the difference been: 
if the viewport is smaller than what we specify then it will fill 100% of the available 
space. Making our website dynamic. 

MARGIN 0 AUTO: is a TRICK to center block elements inside of another block element
We say that the margin on top and bottom is 0 and left and rigth is auto 
AUTO: When we say that we want the margin to be automatically it means that the browser 
when rendering the page will automatically figure out the margin that we want on te left and 
right side. Since both are set to auto it means that left and right will be the same. 
So the element will be center
*/
/*
When we float an element the height collapses and the heigth becomes 0 so what we do is 
use the clearfix hack 
*/
.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 80px; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 60px; }
  .row .col-1-of-2 {
    width: calc((100% - 60px) /2); }
  .row .col-1-of-3 {
    width: calc((100% - (60px * 2)) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - (60px * 2)) / 3) + 60px); }
  .row .col-1-of-4 {
    width: calc((100% - (60px * 3)) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - (60px * 3)) / 4) + 60px); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - (60px * 3)) / 4) + (2 * 60px)); }
